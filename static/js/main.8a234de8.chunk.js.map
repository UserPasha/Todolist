{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/authReducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedIn","state","action","payload","value","authReducer","reducer","setIsLoggedInAC","actions","isInitialize","setInitializeAC","appReducer","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","todolistsReducer","removeTaskAC","tasks","t","addTaskAC","todoListId","updateTaskAC","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","domainModel","getState","task","find","apiModel","deadline","description","priority","startDate","res","resultCode","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","isInitialized","finally","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","textAlign","top","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a234de8.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '4f8341e7-d33a-4d8b-8d10-b8d41fc32b1d'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n//auth\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{userId:number}>>>('/auth/login', data);\r\n    },\r\n    me(){\r\nreturn  instance.get<ResponseType<MeType>>('auth/me');\r\n    },\r\n    logout(){\r\n        return  instance.delete<ResponseType>('auth/login');\r\n    }\r\n}\r\n\r\n// types\r\nexport type LoginParamsType={\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport type MeType ={\r\n    id: number\r\n    email: string\r\n        login: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC,  setAppStatusAC} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {Dispatch} from 'redux'\r\n\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedIn  (state, action: PayloadAction<{value: boolean}>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\n// actions\r\nexport const setIsLoggedInAC = slice.actions.setIsLoggedIn\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const LogoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/authReducer\";\r\nimport {handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: initialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialize: false\r\n}\r\n\r\ntype initialStateType = {\r\n    status: RequestStatusType,\r\n    error: string | null,\r\n    isInitialize: boolean\r\n}\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{status: RequestStatusType}>){\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{error: string | null}>){\r\n            state.error = action.payload.error\r\n        },\r\n        setInitializeAC(state, action: PayloadAction<{value: boolean}>){\r\n            state.isInitialize = action.payload.value\r\n        },\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\n\r\nexport const { setAppStatusAC, setAppErrorAC, setInitializeAC } = slice.actions\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type ErrorType = string | null\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n            dispatch(setInitializeAC({value: true}))\r\n\r\n        } else {\r\n            //не выводим ошибки, чтобы не нервировать пользователя))\r\n        }\r\n    }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n        .finally(()=>{\r\n            dispatch(setInitializeAC({value: true}))\r\n            }\r\n\r\n        )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialState,\r\n    reducers:{\r\n        removeTodolistAC(state, action:PayloadAction<{id:string}>){\r\n           const index =  state.findIndex(tl => tl.id === action.payload.id)\r\n            if(index>-1){\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{todolist: TodolistType}>){\r\n            state.unshift ({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action:PayloadAction<{id: string, title: string}>){\r\n            const index =  state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action:PayloadAction<{id: string, filter: FilterValuesType}>){\r\n            const index =  state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action:PayloadAction<{id: string, status: RequestStatusType}>){\r\n            const index =  state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        setTodolistsAC(state, action:PayloadAction<{todolists: Array<TodolistType>}>){\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        }\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\nexport const {removeTodolistAC,addTodolistAC, changeTodolistTitleAC,\r\n    changeTodolistFilterAC, changeTodolistEntityStatusAC,setTodolistsAC } = slice.actions\r\n\r\n\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({status: \"loading\", id: todolistId}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({title, id}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n","import {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {addTodolistAC, removeTodolistAC, setTodolistsAC} from \"./todolists-reducer\";\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC: (state, action: PayloadAction<{ taskId: string, todolistId: string }>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC: (state, action: PayloadAction <TaskType >) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        },\r\n        updateTaskAC: (state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC: (state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach((tl) => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n    }\r\n\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC} = slice.actions\r\n\r\n\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC({tasks, todolistId}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC({taskId, todolistId})\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId, todolistId, model: domainModel})\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state)=>state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if(isLoggedIn){\r\n            dispatch(fetchTodolistsTC())\r\n        }\r\n\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({filter: value, id: todolistId})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    if(!isLoggedIn){\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./authReducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nexport const Login = () => {\r\n\r\n\r\n    const dispatch=useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state)=>state.auth.isLoggedIn)\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length <= 3) {\r\n                errors.password = 'Password should be more than 3 symbols'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n\r\n    if(isLoggedIn){\r\n        return <Navigate to={'/'}/>\r\n    }\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   {...formik.getFieldProps('password')}\r\n                        />\r\n\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n\r\n                        <FormControlLabel label={'Remember me'} control={<Checkbox\r\n                            checked={formik.values.rememberMe}\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                        />}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport { AppRootStateType } from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport { Menu } from '@mui/icons-material';\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Route, Routes, Navigate} from \"react-router-dom\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {LogoutTC} from \"../features/Login/authReducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized =useSelector<AppRootStateType, boolean>((state) => state.app.isInitialize)\r\n    const isLoggedIn =useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    useEffect(()=>{\r\n        dispatch(initializeAppTC())\r\n\r\n    },[])\r\n    const logoutHandler=useCallback(()=>{\r\n        dispatch(LogoutTC())\r\n    },[])\r\n\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log Out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={\"/\"} element ={<TodolistsList demo={demo}/>}/>\r\n                    <Route path={\"/login\"} element ={ <Login/> }/>\r\n                    <Route path={'/404'} element={<h1 style={{textAlign:\"center\"}}>404: PAGE NOT FOUND</h1>} />\r\n                    <Route path = {'*'} element = {<Navigate to ='/404'/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport {authReducer} from \"../features/Login/authReducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunkMiddleware),\r\n})\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}